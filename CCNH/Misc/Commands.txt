# Temp files and RMM cache cleanup commands ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
# Remove item older than 30 days while in the directory
Get-ChildItem | Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-30) } | Remove-Item -Recurse -Force

# Remove Temp Files
Remove-Item -Path "$env:TEMP\*" -Recurse -Force

# Remove RMM Update Cache
Function Clear-PME {
    # Cleanup PME Cache folders
    Write-Host "PME Cache Cleanup..." -ForegroundColor Cyan
    $CacheFolderPaths = "$env:ProgramData\SolarWinds MSP\SolarWinds.MSP.CacheService", "$env:ProgramData\SolarWinds MSP\SolarWinds.MSP.CacheService\cache", "$env:ProgramData\MspPlatform\FileCacheServiceAgent", "$env:ProgramData\MspPlatform\FileCacheServiceAgent\cache"
    ForEach ($CacheFolderPath in $CacheFolderPaths) {
        If (Test-Path -Path "$CacheFolderPath") {
            Try {
                Write-Output "Performing cleanup of '$CacheFolderPath' folder"
                [Void](Remove-Item -Path "$CacheFolderPath\*.*" -Force -Confirm:$false)
            }
            Catch {
                Write-EventLog @WriteEventLogErrorParams -Message "Unable to cleanup '$CacheFolderPath\*.*' aborting. Error: $($_.Exception.Message).`nScript: Repair-PME.ps1"
                Throw "Unable to cleanup '$CacheFolderPath\*.*' aborting. Error: $($_.Exception.Message)"
            }
        }
    }
}
Clear-PME

# Remove RMM Update Cache and Temp Files using CMD
del /q /s "C:\ProgramData\MspPlatform\FileCacheServiceAgent\cache\*"
rmdir /s /q "C:\ProgramData\MspPlatform\FileCacheServiceAgent\cache"
mkdir "C:\ProgramData\MspPlatform\FileCacheServiceAgent\cache"
del /q /s "%TEMP%\*"
for /d %p in ("%TEMP%\*") do rmdir /s /q "%p"

# System Commands ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Force Intune Sync
Get-ScheduledTask | where {$_.TaskName -eq 'PushLaunch'} | Start-ScheduledTask

# Check Secure Boot
Confirm-SecureBootUEFI

# Remove item older than 30 days while in the directory
Get-ChildItem | Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-30) } | Remove-Item -Recurse -Force

# Get size of directory including files within
"{0:N2} MB" -f ((Get-ChildItem -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB)

# Size info for each folder in Directory
Get-ChildItem -Directory -ErrorAction SilentlyContinue | ForEach-Object {
    $size = (Get-ChildItem -Recurse -Path $_.FullName -File -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1MB
    [PSCustomObject]@{Directory = $_.FullName; Size = "{0:N2} MB" -f $size }
}

# Turn off hibernation
Start-Process powercfg -ArgumentList '/hibernate off' -NoNewWindow -Wait

# Check Disk
diskpart
List Disk

# Correct Time Servers
w32tm /config /syncfromflags:domhier
net stop w32time; net start w32time
w32tm /resync

# Check Windows Upgrade Errors 
Start-Process -FilePath "C:\Temp\SetupDiag.exe" -ArgumentList "/Output:C:\Temp\Results.txt"
& "C:\Temp\SetupDiag.exe" /Output:C:\Temp\Results.txt

# Lock Work Station
C:\Windows\system32\rundll32.exe user32.dll, LockWorkStation

# Search for PST Files on a disk, display size, and export to CSV
Get-ChildItem -Path "F:\" -Recurse -Filter *.pst -ErrorAction SilentlyContinue -Force | ForEach-Object {
    [PSCustomObject]@{
        Path = $_.FullName
        Size = "{0:N2} MB" -f ($_.Length / 1MB)
    }
} | Export-Csv -Path "C:\Temp\PST\PSTFiles.csv" -NoTypeInformation

# User and Profile Management Commands ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Get Currently Logged on user
Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName

# Clear Credentials in Credential Manager
cmdkey /list | ForEach-Object { if ($_ -match "Target: ([^\s]+)") { $targetName = $matches[1]; cmdkey /del:$targetName | Out-Null } }

# Remove Local User Profile
Get-WmiObject -Class Win32_UserProfile | Where-Object { $_.LocalPath -eq ("C:\Users\" + "username") } | Remove-WmiObject

# Delete User Profile
$user = "USERNAME"
$localpath = 'c:\users\' + $user | Get-WmiObject -Class Win32_UserProfile | Where-Object { $_.LocalPath -eq $localpath } | Remove-WmiObject


# Active Directory and User Management Commands ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Create a CSV file of all members of a security group
Get-ADGroupMember -Identity "FinPool10" | Export-Csv -Path "C:\temp\output.csv" -NoTypeInformation

# Get PasswordNotRequired setting for every domain user
Import-Module ActiveDirectory
Get-ADUser -Filter { PasswordNotRequired -eq $true } -Properties Name, PasswordNotRequired | Select-Object Name, PasswordNotRequired

# Reverse PasswordNotRequired for all users with it set
Get-ADUser -Filter { PasswordNotRequired -eq $true } | Set-ADUser -PasswordNotRequired $false

# Rename PC
Rename-Computer -NewName "STFL-ADNS" -DomainCredential (New-Object System.Management.Automation.PSCredential ("cc-nh\administrator", ("ptfb2009!!" | ConvertTo-SecureString -AsPlainText -Force)))


# BitLocker and Disk Management ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Enable Bitlocker
Enable-BitLocker -MountPoint "C:" -EncryptionMethod "AES256" -RecoveryPasswordProtector -SkipHardwareTest


# Software Management ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Uninstall Dell Support Assist
Get-Package -Name "*Dell Support*" | Uninstall-Package -Force

# Uninstall N-Able RMM Software
Get-Package -Name '*Advance*' | Uninstall-Package -Force

# Uninstall Arctic Wolf Software
Get-Package -name *Arctic* | Uninstall-Package -Force


# Azure and Exchange Commands ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Azure Sync Command
Invoke-Command -ComputerName "HUB-DC1-VM" -Credential (New-Object System.Management.Automation.PSCredential ("cc-nh.local\administrator", (ConvertTo-SecureString "ptfb2009!!" -AsPlainText -Force))) -ScriptBlock { Start-ADSyncSyncCycle -PolicyType Delta -ErrorAction SilentlyContinue }

# Connect to Exchange Online
Connect-ExchangeOnline -UserPrincipalName phanlon@nh-cc.org
Get-DynamicDistributionGroup -Identity "GrHQNew" | Get-Recipient -RecipientPreviewFilter

# Get Mailbox Identity
Get-Mailbox -Identity "phanlon" | Format-List DisplayName, PrimarySmtpAddress, EmailAddresses

# Get Member Info of Dynamic Distribution List
Get-DynamicDistributionGroup -Identity "GrHQNew" | Select-Object -ExpandProperty AcceptMessagesOnlyFromSendersOrMembers

$group = Get-DynamicDistributionGroup -Identity "GrHQNew"
$filter = $group.RecipientFilter

# Now use that filter with Get-Recipient to preview members
Get-Recipient -RecipientPreviewFilter $filter

# MS Graph
Install-Module Microsoft.Graph -Scope CurrentUser

Connect-MgGraph -Scopes "User.Read.All"

# Get User Data
Get-MgUser -UserId "phanlon@nh-cc.org" | Select-Object *

# Connect to Azure AD
Install-Module -Name AzureAD 
Import-AzureAD
Connect-AzureAD

# Check Calendar Permissions
Get-UnifiedGroup "ITDepartment" | Format-Table DisplayName, HiddenFrom

# M365 Commands
Set-MailboxCalendarConfiguration -Identity "some-email@nh-cc.org" -WorkingHoursStartTime "08:00:00" -WorkingHoursEndTime "17:00:00"

# Remove Users Photo
Remove-MgUserPhoto -UserId "sta.aptmgr@nh-cc.org"
Disconnect-MgGraph
Connect-ExchangeOnline -UserPrincipalName phanlon@nh-cc.org -ShowProgress $true
Connect-MsolService

# Compliance Login
Connect-IPPSSession
New-ComplianceSearch -Name "SearchRecoverableItems" -ExchangeLocation "user@domain.com" -ContentMatchQuery 'kind:email'
Start-ComplianceSearch -Identity "SearchRecoverableItems"
New-ComplianceSearchAction -SearchName "SearchRecoverableItems" -Purge -PurgeType HardDelete
Get-ComplianceSearch

# Get the creation date of the user
Get-AzureADUser -ObjectId user@domain.com | Select-Object DisplayName, UserPrincipalName, CreationDate

# Install Exchange Online Management Module
Install-Module -Name ExchangeOnlineManagement
Import-Module ExchangeOnlineManagement
Connect-ExchangeOnline -UserPrincipalName phanlon@nh-cc.org
Restore-InactiveMailbox -Identity "user@domain.com" -TargetMailbox "user@domain.com"

# Search for Mailboxes
Get-Recipient -Filter { EmailAddresses -like "*sta.*" } | Select-Object DisplayName, PrimarySmtpAddress


# System Maintenance Commands ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Remove Temp Files
Remove-Item -Path "$env:TEMP\*" -Recurse -Force
Remove-Item -Path "*" -Recurse -Force

# Dism Scans
sfc -scannow
DISM /Online /Cleanup-Image /ScanHealth
DISM /Online /Cleanup-Image /RestoreHealth

# Remove RMM Update Cache
Remove-Item -Path "C:\ProgramData\MspPlatform\FileCacheServiceAgent\cache\*" -Recurse -Force


# SentinelOne Commands ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# SentinelOne Unprotect
.\sentinelctl unprotect -k "PassPhrase"

# SentinelOne Install
Start-Process -FilePath "msiexec.exe" -ArgumentList '/i "C:\Temp\SentinelInstall.msi" TOKEN="site-token" /qn' -NoNewWindow -Wait

# SentinelOne Repair
.\SentinelInstaller.msi -t "site-id" --force


# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Sysmon Commands ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
(Get-Item "C:\Windows\sysmon64.exe").VersionInfo.FileVersion
.\sysmon64.exe -i -accepteula
.\sysmon64.exe -u force


# Miscellaneous Commands ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Capture Wifi
netsh wlan show profiles

# Export Wifi to xml file
netsh wlan export profile name="Wifi_Name" folder="C:\temp" key=clear

# Import captured Wifi
netsh wlan add profile filename="C:\Temp\Wi-Fi-Chelmsford.xml"


# Console Beep
$endTime = (Get-Date).AddSeconds(5); while ((Get-Date) -lt $endTime) { [Console]::Beep(500, 1000); Start-Sleep -Milliseconds 500 }

# Check Printers
Get-Printer 

# Add Printer and make it default
(New-Object -ComObject WScript.Network).AddWindowsPrinterConnection("\\HUB-VCPI2-VM\HQ-HR-KON227"); (New-Object -ComObject WScript.Network).SetDefaultPrinter("\\HUB-VCPI2-VM\HQ-FIN-RIC")

# Remove Printer
Remove-Printer -Name "St. Charles RICOH IM C400SR"

# Office 32 or 64 bit check
Get-ItemProperty HKLM:\Software\Microsoft\Office\ClickToRun\Configuration | Select-Object -Property Platform

# Remove Wifi
netsh wlan delete profile name="WHC-Guest"

# Add correct Enterprise Key and Activate
slmgr /ipk R2NHG-DFQ27-BC3J4-PQPY9-Y7V2F
slmgr /ato

# Check Windows Activation
cscript //nologo C:\Windows\System32\slmgr.vbs /dlv

# Get Windows version
Get-WindowsEdition -Online

# GPO Report
gpresult /H C:\temp\GPOReport.html

# Get Package info
Get-Package -Name '*AppName*'

# Check Domain
$domain = (Get-CimInstance -Class Win32_ComputerSystem).Domain
if ($domain) { Write-Host "Device is joined to domain: $domain" } else { Write-Host "Device is not joined to a domain" }
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()

# Get Network and Local drive information
Get-PSDrive -PSProvider FileSystem

# Map a Drive
New-PSDrive -Name "T" -PSProvider FileSystem -Root "\\hub-fs02-vm\CCNH\IT" -Persist

# Clear Clipboard
Add-Type -AssemblyName System.Windows.Forms; [System.Windows.Forms.Clipboard]::Clear()

# Update over Background
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; if (!(Get-Module -ListAvailable -Name PSWindowsUpdate)) { Install-Module -Name PSWindowsUpdate -Force; Import-Module PSWindowsUpdate } else { Import-Module PSWindowsUpdate }; Add-WUServiceManager -ServiceID "7971f918-a847-4430-9279-4a52d1efe18d" -Confirm:$false; $availableUpdates = Get-WindowsUpdate -MicrosoftUpdate | Where-Object { $_.UpdateType -eq "Software" -and $_.IsDriver -eq $false }; if (!$availableUpdates.Count) { Write-Output "No updates are available from Microsoft Update." } else { $availableUpdates | Where-Object { $_.UpdateType -eq "Software" -and $_.IsDriver -eq $false } | Install-WindowsUpdate -MicrosoftUpdate -AcceptAll -IgnoreReboot | Out-File "C:\Windows\PSWindowsUpdate.log" }

# Different Windows Update
usoclient.exe StartScan
usoclient.exe RefreshSettings
Get-WindowsUpdateLog

# Cleanup Offline Address Book and Auto-Complete Cache
# Path to the auto-complete cache files
$Path = "$env:APPDATA\Microsoft\Outlook\RoamCache"

# Remove all .dat files in the RoamCache directory
Remove-Item "$Path\*.dat" -Force -ErrorAction SilentlyContinue

Write-Host "Auto-complete cache cleared."


# Path to the OAB folder
$OABPath = "$env:LOCALAPPDATA\Microsoft\Outlook\Offline Address Books"

# Remove all OAB files
Remove-Item "$OABPath\*" -Recurse -Force -ErrorAction SilentlyContinue

# Remote Desktop Commands
# Enable Remote Desktop
Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0

# Enable Network Level Authentication (Optional, but recommended)
Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'UserAuthentication' -Value 1

# Allow Remote Desktop in Firewall
Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

# (Optional) Restart Remote Desktop Services
Restart-Service -Name TermService -Force

# Disable Remote Desktop
Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 1

# Disable Network Level Authentication
Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'UserAuthentication' -Value 0

# Block Remote Desktop in Firewall
Disable-NetFirewallRule -DisplayGroup "Remote Desktop"

# (Optional) Restart Remote Desktop Services
Restart-Service -Name TermService -Force

# Add user to AD group from CSV file
$groupName = "M365Users"  # Name of the AD group
$users = Import-Csv "C:\Temp\Users_SamAccountNames.csv"  # Path to your CSV file

foreach ($user in $users) {
    $samAccountName = $user.SamAccountName  # Use the SamAccountName from the second column

    # Get the AD user by SamAccountName
    $adUser = Get-ADUser -Filter { SamAccountName -eq $samAccountName } -Properties SamAccountName

    if ($adUser) {
        # Add the user to the specified group by SamAccountName
        Add-ADGroupMember -Identity $groupName -Members $adUser.SamAccountName
        Write-Host "Added $samAccountName to group $groupName"
    }
    else {
        Write-Host "User $samAccountName not found in AD"
    }
}

# Get System Uptime
function Get-Uptime {
    [CmdletBinding()]
    param (
        [string]$ComputerName = $env:COMPUTERNAME  # Default to the local computer if no name is provided
    )

    foreach ($Computer in $ComputerName) {
        try {
            # Get the Win32_OperatingSystem WMI object for the specified computer
            $os = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $Computer

            # Calculate uptime in days
            $diff = $os.ConvertToDateTime($os.LocalDateTime) - $os.ConvertToDateTime($os.LastBootUpTime)
            $uptimeDays = $diff.Days

            # Create and format the output object
            $properties = @{
                'ComputerName' = $Computer
                'UptimeDays'   = $uptimeDays
            }
            $obj = New-Object -TypeName PSObject -Property $properties

            # Output the object
            Write-Output $obj
        }
        catch {
            Write-Warning "Failed to retrieve uptime for $Computer. Error: $_"
        }
    }
}
Get-Uptime

# Bettery Report
powercfg /batteryreport /output "C:\temp\battery-report.html"

# Check for Password Last Set
Get-ADUser -SearchBase "OU=HCH,OU=HC Sites,OU=Accounts,DC=cc-nh,DC=local" -Filter * -Properties PasswordLastSet | Where-Object { $_.PasswordLastSet -eq $null } | Select-Object Name, SamAccountName

# Scan an exe file
.\strings.exe -nobanner -q "C:\Path\To\Installer.exe" | Select-String -Pattern "/silent","/quiet","/verysilent","/S","/install","/?" 
